# -*- coding: utf-8 -*-
"""preprocessing_ Multi_location

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xQ01vcRi4a_gFgnSwPLSG-ugJxi1Bt-v
"""

#!/usr/bin/python3

import os
import numpy as np
import PIL
from PIL import Image
import natsort
import cv2
import glob

# 이미지 전처리 코드
def preprocess_image(img):
  color_image = np.array(img)
  grayscale_image = img.convert("L")
  grayscale_image = np.array(grayscale_image)
  threshold_min=130
  threshold_max=255
  canny = cv2.Canny(grayscale_image, 500, 700)  # Canny 엣지 검출
  blurred_image = cv2.blur(grayscale_image, (17, 17))  # 이미지 전체를 블러링하여 주변 값으로 대체할 대상 생성

  result = np.where(canny != 0, grayscale_image, blurred_image)
  _, binary_image = cv2.threshold(result, threshold_min, threshold_max, cv2.THRESH_BINARY)
  contours, _ = cv2.findContours(binary_image, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

  max_contour = max(contours, key=cv2.contourArea)
  x, y, w, h = cv2.boundingRect(max_contour)
  margin = 15

  cropped_image = color_image[y+margin:y+h-margin, x+margin:x+w-margin]
  return cropped_image


# 테스트 이미지를 불러와 이미지 이름으로 리스트(temp_list)를 만든다.
test_path = '../../train_set'
test_list = glob.glob(test_path + '/*.jpg')
test_list = natsort.natsorted(test_list)

test_list = [os.path.basename(file_path) for file_path in test_list]
temp_list = []

count = 0
i = 0
while(i + 4 < len(test_list) + 1):
  temp = test_list[i:i+4]
  for j in range(4):
    temp[j] = test_path + '/' + temp[j]
  temp_list.append(temp)
  i += 4
  count += 1

temp_list = []

count = 0
i = 0

while(i + 4 < len(test_list) + 1):
  temp = test_list[i:i+4]
  for j in range(4):
    temp[j] = test_path + '/' + temp[j]
  temp_list.append(temp)
  i += 4
  count += 1

# os.mkdir('../../concat_test_set')

j = 0
index = 0
num = 0

while(num + 2 <= len(temp_list)):
  imgs_L = [Image.open(k) for k in temp_list[num]]
  imgs_R = [Image.open(u) for u in temp_list[num+1]]

  preprocessed_imgs_L = [preprocess_image(img) for img in imgs_L]
  resized_imgs_L = [cv2.resize(img, (150, 150)) for img in preprocessed_imgs_L]
  imgs_comb_L = np.vstack([i for i in resized_imgs_L])

  preprocessed_imgs_R = [preprocess_image(img) for img in imgs_R]
  resized_imgs_R = [cv2.resize(img, (150, 150)) for img in preprocessed_imgs_R]
  imgs_comb_R = np.vstack([i for i in resized_imgs_R])

  imgs_comb = np.hstack((imgs_comb_L, imgs_comb_R))
  imgs_comb = Image.fromarray(imgs_comb)
  imgs_name = "../../concat_test_set/%d.jpg" % (index + 1)
  imgs_comb.save(imgs_name, 'png')

  num += 2
  index += 1

import glob
imgslist = glob.glob('../../concat_test_set/*.jpg')

print(len(imgslist)) 

#출력된 정수 값이 test_set의 개수의 1/8이면 정상적으로 전처리된 것